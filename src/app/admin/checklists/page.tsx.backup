"use client";
import { useState, useEffect } from "react";

interface ChecklistTemplate {
  id: string;
  content: string;
  inputter: string;
  inputDate: string;
  workplace: string;
  category: string;
  timeSlot: string;
  isActive: boolean;
  tags?: Tag[];
  items?: ChecklistItem[];
}

interface Tag {
  id: string;
  name: string;
  color: string;
}

interface ChecklistItem {
  id: string;
  templateId: string;
  type: string;
  content: string;
  instructions?: string;
  order: number;
  isRequired: boolean;
  isActive: boolean;
  inventoryItem?: InventoryItem;
  precautions?: Precaution[];
  manuals?: Manual[];
  tags?: Tag[];
}

interface InventoryItem {
  id: string;
  name: string;
  category: string;
  currentStock: number;
  minStock: number;
  unit: string;
}

interface Precaution {
  id: string;
  title: string;
  content: string;
  workplace: string;
  timeSlot: string;
  priority: number;
}

interface Manual {
  id: string;
  title: string;
  content: string;
  mediaUrls: string[];
  workplace: string;
  timeSlot: string;
  category: string;
  version: string;
}

const workplaceOptions = [
  { value: "HALL", label: "홀" },
  { value: "KITCHEN", label: "주방" },
  { value: "COMMON", label: "공통" },
];

const categoryOptions = [
  { value: "CHECKLIST", label: "체크리스트" },
  { value: "COMMON", label: "공통" },
];

const timeSlotOptions = [
  { value: "PREPARATION", label: "준비" },
  { value: "IN_PROGRESS", label: "진행" },
  { value: "CLOSING", label: "마감" },
  { value: "COMMON", label: "공통" },
];

export default function ChecklistsPage() {
  const [checklists, setChecklists] = useState<ChecklistTemplate[]>([]);
  const [tags, setTags] = useState<Tag[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  
  // 태그 생성 모달 상태
  const [showTagModal, setShowTagModal] = useState(false);
  const [newTagName, setNewTagName] = useState("");
  const [newTagColor, setNewTagColor] = useState("#3B82F6");
  const [creatingTag, setCreatingTag] = useState(false);

  // 필터링 상태
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilterTags, setSelectedFilterTags] = useState<string[]>([]);
  const [filterWorkplace, setFilterWorkplace] = useState("");
  const [filterCategory, setFilterCategory] = useState("");
  const [filterTimeSlot, setFilterTimeSlot] = useState("");
  const [showAllTags, setShowAllTags] = useState(false);
  const [showFilters, setShowFilters] = useState(false);

  // 수정 모드 상태
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editingData, setEditingData] = useState({
    content: "",
    workplace: "HALL",
    category: "CHECKLIST",
    timeSlot: "PREPARATION",
    selectedTags: [] as string[],
  });

  // 삭제 확인 상태
  const [deleteId, setDeleteId] = useState<string | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // 체크리스트 항목 관리 상태 (기존 모달용 - 제거 예정)
  const [selectedTemplateId, setSelectedTemplateId] = useState<string | null>(null);
  const [showItemModal, setShowItemModal] = useState(false);
  const [editingItemId, setEditingItemId] = useState<string | null>(null);
  const [itemFormData, setItemFormData] = useState({
    type: "check",
    content: "",
    instructions: "",
    order: 0,
    isRequired: true,
    inventoryItemId: "",
    precautionIds: [] as string[],
    manualIds: [] as string[],
  });

  // 통합 수정 모달 상태
  const [showIntegratedEditModal, setShowIntegratedEditModal] = useState(false);
  const [editingItem, setEditingItem] = useState<ChecklistItem | null>(null);
  const [activeTab, setActiveTab] = useState<'basic' | 'connections' | 'tags'>('basic');
  
  // 항목 연결 검색 상태
  const [connectionSearchCategory, setConnectionSearchCategory] = useState<string>('');
  const [connectionSearchTags, setConnectionSearchTags] = useState<string[]>([]);
  const [filteredConnectionItems, setFilteredConnectionItems] = useState<any[]>([]);
  const [selectedConnectionItems, setSelectedConnectionItems] = useState<any[]>([]);

  // 연결 데이터 상태
  const [inventoryItems, setInventoryItems] = useState<any[]>([]);
  const [precautions, setPrecautions] = useState<any[]>([]);
  const [manuals, setManuals] = useState<any[]>([]);
  const [loadingItemConnections, setLoadingItemConnections] = useState(false);
  
  // 체크리스트 항목 목록 상태
  const [checklistItems, setChecklistItems] = useState<any[]>([]);
  const [loadingItems, setLoadingItems] = useState(false);

  // 폼 상태
  const [formData, setFormData] = useState({
    content: "",
    workplace: "HALL",
    category: "CHECKLIST",
    timeSlot: "PREPARATION",
    selectedTags: [] as string[],
  });

  // 기존 항목 연결 상태 (제거 예정)
  const [showConnectionModal, setShowConnectionModal] = useState(false);
  const [selectedConnectionCategory, setSelectedConnectionCategory] = useState("");
  const [selectedConnectionTag, setSelectedConnectionTag] = useState("");
  const [filteredConnectionItemsOld, setFilteredConnectionItemsOld] = useState({
    inventoryItems: [] as any[],
    precautions: [] as any[],
    manuals: [] as any[]
  });
  const [selectedConnectionItemsOld, setSelectedConnectionItemsOld] = useState({
    inventoryItems: [] as string[],
    precautions: [] as string[],
    manuals: [] as string[]
  });
  const [loadingConnections, setLoadingConnections] = useState(false);
  const [tempConnectedItems, setTempConnectedItems] = useState<any[]>([]); // 임시 저장된 연결 항목들

  useEffect(() => {
    fetchChecklists();
    fetchTags();
  }, []);

  // 연결 데이터 가져오기
  const fetchConnections = async () => {
    setLoadingItemConnections(true);
    try {
      // 재고 아이템 가져오기
      const inventoryResponse = await fetch('/api/admin/inventory', { credentials: 'include' });
      if (inventoryResponse.ok) {
        const inventoryData = await inventoryResponse.json();
        setInventoryItems(inventoryData.inventoryItems || []);
      }

      // 주의사항 가져오기
      const precautionsResponse = await fetch('/api/admin/precautions', { credentials: 'include' });
      if (precautionsResponse.ok) {
        const precautionsData = await precautionsResponse.json();
        setPrecautions(precautionsData.precautions || []);
      }

      // 메뉴얼 가져오기
      const manualsResponse = await fetch('/api/admin/manuals', { credentials: 'include' });
      if (manualsResponse.ok) {
        const manualsData = await manualsResponse.json();
        setManuals(manualsData.manuals || []);
      }
    } catch (error) {
      console.error('연결 데이터 로딩 실패:', error);
    } finally {
      setLoadingItemConnections(false);
    }
  };

  // 태그 기반 연결 데이터 가져오기
  const fetchTagBasedConnections = async (tagName: string) => {
    setLoadingConnections(true);
    try {
      // 태그로 필터링된 재고 아이템 가져오기
      const inventoryResponse = await fetch(`/api/admin/inventory?tag=${encodeURIComponent(tagName)}`, { 
        credentials: 'include' 
      });
      if (inventoryResponse.ok) {
        const inventoryData = await inventoryResponse.json();
        setFilteredConnectionItems(prev => ({
          ...prev,
          inventoryItems: inventoryData.inventoryItems || []
        }));
      }

      // 태그로 필터링된 주의사항 가져오기
      const precautionsResponse = await fetch(`/api/admin/precautions?tag=${encodeURIComponent(tagName)}`, { 
        credentials: 'include' 
      });
      if (precautionsResponse.ok) {
        const precautionsData = await precautionsResponse.json();
        setFilteredConnectionItems(prev => ({
          ...prev,
          precautions: precautionsData.precautions || []
        }));
      }

      // 태그로 필터링된 메뉴얼 가져오기
      const manualsResponse = await fetch(`/api/admin/manuals?tag=${encodeURIComponent(tagName)}`, { 
        credentials: 'include' 
      });
      if (manualsResponse.ok) {
        const manualsData = await manualsResponse.json();
        setFilteredConnectionItems(prev => ({
          ...prev,
          manuals: manualsData.manuals || []
        }));
      }
    } catch (error) {
      console.error('태그 기반 연결 데이터 로딩 실패:', error);
    } finally {
      setLoadingConnections(false);
    }
  };

  const fetchTags = async () => {
    try {
      const response = await fetch("/api/admin/tags", { credentials: "include" });
      if (response.ok) {
        const data = await response.json();
        setTags(data);
      }
    } catch (error) {
      console.error("태그 로딩 실패:", error);
    }
  };

  // 새 태그 생성
  const createTag = async () => {
    if (!newTagName.trim()) {
      setError("태그 이름을 입력해주세요.");
      return;
    }

    setCreatingTag(true);
    setError("");

    try {
      const response = await fetch("/api/admin/tags", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ name: newTagName, color: newTagColor }),
      });

      if (response.ok) {
        setNewTagName("");
        setNewTagColor("#3B82F6");
        setShowTagModal(false);
        fetchTags(); // 태그 목록 새로고침
        setSuccess("태그가 성공적으로 생성되었습니다.");
      } else {
        const data = await response.json();
        setError(data.error || "태그 생성에 실패했습니다.");
      }
    } catch (error) {
      setError("태그 생성에 실패했습니다.");
    } finally {
      setCreatingTag(false);
    }
  };

  const fetchChecklists = async () => {
    try {
      const response = await fetch("/api/admin/checklists", { credentials: "include" });
      if (response.ok) {
        const data = await response.json();
        setChecklists(data.checklists || []);
      } else {
        setError("체크리스트 목록을 불러오는데 실패했습니다.");
      }
    } catch (error) {
      setError("서버 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  const fetchChecklistItems = async (templateId: string) => {
    setLoadingItems(true);
    try {
      const response = await fetch(`/api/admin/checklist-items?templateId=${templateId}`, { 
        credentials: "include" 
      });
      if (response.ok) {
        const data = await response.json();
        setChecklistItems(data.checklistItems || []);
      } else {
        const errorData = await response.json();
        console.error("체크리스트 항목 조회 오류:", errorData.error);
        setChecklistItems([]);
      }
    } catch (error) {
      console.error("체크리스트 항목 조회 오류:", error);
      setChecklistItems([]);
    } finally {
      setLoadingItems(false);
    }
  };

  const handleItemSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedTemplateId) return;

    try {
      const url = editingItemId 
        ? "/api/admin/checklist-items" 
        : "/api/admin/checklist-items";
      
      const method = editingItemId ? "PUT" : "POST";
      const body = editingItemId 
        ? { ...itemFormData, id: editingItemId }
        : { ...itemFormData, templateId: selectedTemplateId };

      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(body),
      });

      if (response.ok) {
        setSuccess(editingItemId ? "체크리스트 항목이 수정되었습니다." : "체크리스트 항목이 추가되었습니다.");
        setShowItemModal(false);
        setEditingItemId(null);
        setItemFormData({
          type: "check",
          content: "",
          instructions: "",
          order: 0,
          isRequired: true,
          inventoryItemId: "",
          precautionIds: [],
          manualIds: [],
        });
        // 체크리스트 목록 새로고침
        fetchChecklists();
        // 항목 목록 새로고침
        if (selectedTemplateId) {
          await fetchChecklistItems(selectedTemplateId);
        }
      } else {
        const data = await response.json();
        setError(data.error || "체크리스트 항목 저장에 실패했습니다.");
      }
    } catch (error) {
      setError("체크리스트 항목 저장에 실패했습니다.");
    }
  };

  const handleItemEdit = (item: ChecklistItem) => {
    setEditingItemId(item.id);
    setItemFormData({
      type: item.type,
      content: item.content,
      instructions: item.instructions || "",
      order: item.order,
      isRequired: item.isRequired,
      inventoryItemId: item.inventoryItem?.id || "",
      precautionIds: item.precautions?.map(p => p.id) || [],
      manualIds: item.manuals?.map(m => m.id) || [],
    });
    setShowItemModal(true);
  };

  // 통합 수정 모달 열기
  const openIntegratedEditModal = async (item: ChecklistItem) => {
    console.log('통합 모달 열기 시도:', item);
    
    // 실제 데이터베이스에서 최신 정보를 가져옴
    try {
      const response = await fetch(`/api/admin/checklist-items?id=${item.id}`, {
        credentials: 'include'
      });
      if (response.ok) {
        const updatedItem = await response.json();
        setEditingItem(updatedItem);
        console.log('업데이트된 아이템:', updatedItem);
      } else {
        setEditingItem(item);
        console.log('기존 아이템 사용:', item);
      }
    } catch (error) {
      setEditingItem(item);
      console.log('에러 발생, 기존 아이템 사용:', item);
    }
    
    setActiveTab('basic');
    setShowIntegratedEditModal(true);
    console.log('모달 상태 설정 완료');
    await fetchConnections();
  };

  const handleItemDelete = async (itemId: string) => {
    if (!confirm("이 항목을 삭제하시겠습니까?")) return;

    try {
      const response = await fetch(`/api/admin/checklist-items?id=${itemId}`, {
        method: "DELETE",
        credentials: "include",
      });

      if (response.ok) {
        setSuccess("체크리스트 항목이 삭제되었습니다.");
        fetchChecklists();
        // 항목 목록 새로고침
        if (selectedTemplateId) {
          await fetchChecklistItems(selectedTemplateId);
        }
      } else {
        const data = await response.json();
        setError(data.error || "체크리스트 항목 삭제에 실패했습니다.");
      }
    } catch (error) {
      setError("체크리스트 항목 삭제에 실패했습니다.");
    }
  };

  const openItemModal = async (templateId: string) => {
    setSelectedTemplateId(templateId);
    setEditingItemId(null);
    setItemFormData({
      type: "check",
      content: "",
      instructions: "",
      order: 0,
      isRequired: true,
      inventoryItemId: "",
      precautionIds: [],
      manualIds: [],
    });
    setShowItemModal(true);
    await fetchConnections(); // 연결 데이터 가져오기
    await fetchChecklistItems(templateId); // 항목 목록 가져오기
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitting(true);
    setError("");
    setSuccess("");

    try {
      const response = await fetch("/api/admin/checklists", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      
      if (response.ok) {
        const checklistId = data.checklistTemplate.id;
        
        // 임시 저장된 항목들이 있으면 체크리스트 항목으로 생성
        if (tempConnectedItems.length > 0) {
          try {
            for (const item of tempConnectedItems) {
              const itemData = {
                templateId: checklistId,
                type: item.category === 'INGREDIENTS' ? 'ingredient_check' :
                      item.category === 'SUPPLIES' ? 'supply_check' :
                      item.category === 'PRECAUTIONS' ? 'precaution_check' :
                      item.category === 'MANUALS' ? 'manual_reference' : 'check',
                content: `${item.title || item.name} 확인`,
                instructions: '',
                order: 0,
                isRequired: true,
                inventoryItemId: item.category === 'INGREDIENTS' || item.category === 'SUPPLIES' ? item.id : '',
                precautionIds: item.category === 'PRECAUTIONS' ? [item.id] : [],
                manualIds: item.category === 'MANUALS' ? [item.id] : []
              };

              const itemResponse = await fetch('/api/admin/checklist-items', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(itemData)
              });

              if (!itemResponse.ok) {
                console.error('체크리스트 항목 생성 실패:', item);
              }
            }
          } catch (error) {
            console.error('체크리스트 항목 생성 중 오류:', error);
          }
        }
        
        setSuccess("체크리스트가 성공적으로 등록되었습니다.");
        setFormData({
          content: "",
          workplace: "HALL",
          category: "CHECKLIST",
          timeSlot: "PREPARATION",
          selectedTags: [],
        });
        setTempConnectedItems([]); // 임시 저장된 항목들 초기화
        fetchChecklists(); // 목록 새로고침
      } else {
        setError(data.error || "체크리스트 등록에 실패했습니다.");
      }
    } catch (error) {
      setError("서버 오류가 발생했습니다.");
    } finally {
      setSubmitting(false);
    }
  };

  const handleEdit = (checklist: ChecklistTemplate) => {
    setEditingId(checklist.id);
    setEditingData({
      content: checklist.content,
      workplace: checklist.workplace,
      category: checklist.category,
      timeSlot: checklist.timeSlot,
      selectedTags: checklist.tags ? checklist.tags.map(tag => tag.id) : [],
    });
    
    // 체크리스트 항목들도 함께 가져오기
    if (checklist.items) {
      setChecklistItems(checklist.items);
    } else {
      fetchChecklistItems(checklist.id);
    }
  };

  const handleEditSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingId) return;

    setSubmitting(true);
    setError("");
    setSuccess("");

    try {
      const response = await fetch(`/api/admin/checklists/${editingId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(editingData),
      });

      const data = await response.json();

      if (response.ok) {
        setSuccess("체크리스트가 성공적으로 수정되었습니다.");
        setEditingId(null);
        fetchChecklists(); // 목록 새로고침
      } else {
        setError(data.error || "체크리스트 수정에 실패했습니다.");
      }
    } catch (error) {
      setError("서버 오류가 발생했습니다.");
    } finally {
      setSubmitting(false);
    }
  };

  const handleEditCancel = () => {
    setEditingId(null);
    setEditingData({
      content: "",
      workplace: "HALL",
      category: "CHECKLIST",
      timeSlot: "PREPARATION",
      selectedTags: [],
    });
  };

  const handleDelete = (id: string) => {
    setDeleteId(id);
    setShowDeleteConfirm(true);
  };

  const confirmDelete = async () => {
    if (!deleteId) return;

    setSubmitting(true);
    setError("");
    setSuccess("");

    try {
      const response = await fetch(`/api/admin/checklists/${deleteId}`, {
        method: "DELETE",
        credentials: "include",
      });

      const data = await response.json();

      if (response.ok) {
        setSuccess("체크리스트가 성공적으로 삭제되었습니다.");
        setShowDeleteConfirm(false);
        setDeleteId(null);
        fetchChecklists(); // 목록 새로고침
      } else {
        setError(data.error || "체크리스트 삭제에 실패했습니다.");
      }
    } catch (error) {
      setError("서버 오류가 발생했습니다.");
    } finally {
      setSubmitting(false);
    }
  };

  const cancelDelete = () => {
    setShowDeleteConfirm(false);
    setDeleteId(null);
  };

  const getWorkplaceLabel = (value: string) => {
    return workplaceOptions.find(option => option.value === value)?.label || value;
  };

  const getCategoryLabel = (value: string) => {
    const categoryMap: { [key: string]: string } = {
      "CHECKLIST": "체크리스트",
      "COMMON": "공통",
      "PRECAUTIONS": "주의사항",
      "INGREDIENTS": "재료",
      "SUPPLIES": "용품",
      "MANUAL": "메뉴얼",
      "HYGIENE": "위생"
    };
    return categoryMap[value] || value;
  };

  const getTimeSlotLabel = (value: string) => {
    return timeSlotOptions.find(option => option.value === value)?.label || value;
  };

  // 필터링된 체크리스트 목록
  const filteredChecklists = checklists.filter(checklist => {
    // 검색어 필터링
    const matchesSearch = searchTerm === "" || 
      checklist.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      checklist.inputter.toLowerCase().includes(searchTerm.toLowerCase());

    // 위치 필터링
    const matchesWorkplace = filterWorkplace === "" || checklist.workplace === filterWorkplace;

    // 구분 필터링
    const matchesCategory = filterCategory === "" || checklist.category === filterCategory;

    // 시간대 필터링
    const matchesTimeSlot = filterTimeSlot === "" || checklist.timeSlot === filterTimeSlot;

    // 태그 필터링 (AND 조건: 선택된 모든 태그를 포함해야 함)
    const matchesTags = selectedFilterTags.length === 0 || 
      (checklist.tags && selectedFilterTags.every(tagId => 
        checklist.tags!.some(tag => tag.id === tagId)
      ));

    return matchesSearch && matchesWorkplace && matchesCategory && matchesTimeSlot && matchesTags;
  });

  // 필터 초기화
  const clearFilters = () => {
    setSearchTerm("");
    setSelectedFilterTags([]);
    setFilterWorkplace("");
    setFilterCategory("");
    setFilterTimeSlot("");
  };

  // 태그 클릭 시 필터 적용
  const handleTagClick = (tagId: string) => {
    if (selectedFilterTags.includes(tagId)) {
      // 이미 선택된 태그면 제거
      setSelectedFilterTags(selectedFilterTags.filter(id => id !== tagId));
    } else {
      // 선택되지 않은 태그면 추가
      setSelectedFilterTags([...selectedFilterTags, tagId]);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">로딩 중...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-800 mb-8">체크리스트 관리</h1>

        {/* 체크리스트 등록 폼 */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-800 mb-6">새 체크리스트 등록</h2>
          
          {error && <div className="text-red-500 text-sm mb-4">{error}</div>}
          {success && <div className="text-green-500 text-sm mb-4">{success}</div>}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  위치 *
                </label>
                <select
                  value={formData.workplace}
                  onChange={(e) => setFormData({ ...formData, workplace: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                  required
                >
                  {workplaceOptions.map((option) => (
                    <option key={option.value} value={option.value} className="text-gray-800">
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  구분 *
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                  required
                >
                  {categoryOptions.map((option) => (
                    <option key={option.value} value={option.value} className="text-gray-800">
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  시간 *
                </label>
                <select
                  value={formData.timeSlot}
                  onChange={(e) => setFormData({ ...formData, timeSlot: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                  required
                >
                  {timeSlotOptions.map((option) => (
                    <option key={option.value} value={option.value} className="text-gray-800">
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                체크리스트 내용 *
              </label>
              <textarea
                value={formData.content}
                onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800 placeholder-gray-500"
                rows={3}
                placeholder="체크리스트 항목을 입력하세요..."
                required
              />
            </div>

            {/* 태그 선택 */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  태그 선택 (선택사항)
                </label>
                <div className="flex gap-2">
                  <button
                    type="button"
                    onClick={() => setShowConnectionModal(true)}
                    className="flex items-center space-x-1 px-2 py-1 text-sm bg-purple-600 text-white rounded-md hover:bg-purple-700 transition"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                    <span>항목 연결</span>
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowTagModal(true)}
                    className="flex items-center space-x-1 px-2 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <span>태그 추가</span>
                  </button>
                </div>
              </div>
              <div className="border border-gray-300 rounded-lg p-3">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {tags.map((tag) => (
                    <label key={tag.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                      <input
                        type="checkbox"
                        checked={formData.selectedTags.includes(tag.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setFormData({
                              ...formData,
                              selectedTags: [...formData.selectedTags, tag.id]
                            });
                          } else {
                            setFormData({
                              ...formData,
                              selectedTags: formData.selectedTags.filter(id => id !== tag.id)
                            });
                          }
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <div className="flex items-center space-x-1">
                        <div
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: tag.color }}
                        ></div>
                        <span className="text-sm text-gray-700">{tag.name}</span>
                      </div>
                    </label>
                  ))}
                </div>
                {tags.length === 0 && (
                  <p className="text-sm text-gray-500 mt-2">
                    등록된 태그가 없습니다. 위의 "태그 추가" 버튼을 클릭하여 새 태그를 생성해주세요.
                  </p>
                )}
              </div>
            </div>

            {/* 임시 저장된 연결 항목들 표시 */}
            {tempConnectedItems.length > 0 && (
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  연결된 항목들 ({tempConnectedItems.length}개)
                  <button
                    type="button"
                    onClick={() => setTempConnectedItems([])}
                    className="ml-2 text-sm text-red-500 hover:text-red-700"
                    title="모든 연결 항목 제거"
                  >
                    모두 제거
                  </button>
                </label>
                <div className="border border-gray-300 rounded-lg p-3 bg-gray-50">
                  <div className="space-y-2">
                    {tempConnectedItems.map((item, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-white rounded border">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium text-gray-700">
                            {item.title || item.name}
                          </span>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            item.category === 'INGREDIENTS' ? 'bg-blue-100 text-blue-700' :
                            item.category === 'SUPPLIES' ? 'bg-green-100 text-green-700' :
                            item.category === 'PRECAUTIONS' ? 'bg-yellow-100 text-yellow-700' :
                            item.category === 'MANUALS' ? 'bg-purple-100 text-purple-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>
                            {item.category === 'INGREDIENTS' ? '재료' :
                             item.category === 'SUPPLIES' ? '용품' :
                             item.category === 'PRECAUTIONS' ? '주의사항' :
                             item.category === 'MANUALS' ? '메뉴얼' : item.category}
                          </span>
                        </div>
                        <button
                          type="button"
                          onClick={() => setTempConnectedItems(tempConnectedItems.filter((_, i) => i !== index))}
                          className="text-red-500 hover:text-red-700"
                          title="제거"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={submitting}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition font-semibold disabled:opacity-50 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              {submitting ? "등록 중..." : "체크리스트 등록"}
            </button>
          </form>
        </div>

        {/* 필터링 섹션 */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-800">필터링</h2>
            <div className="flex items-center gap-2">
              {/* 초기화 버튼 - 항상 표시 */}
              <button
                onClick={clearFilters}
                className="flex items-center gap-2 px-3 py-2 text-sm bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
                title="필터 초기화"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                초기화
              </button>
              
              {/* 필터 접기/펼치기 버튼 */}
              <button
                type="button"
                onClick={() => setShowFilters(!showFilters)}
                className="flex items-center gap-2 px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition"
                title={showFilters ? "필터 접기" : "필터 펼치기"}
              >
                <svg 
                  className={`w-4 h-4 transition-transform duration-200 ${showFilters ? 'rotate-180' : ''}`} 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
                {showFilters ? "접기" : "필터"}
              </button>
            </div>
          </div>
          
          {showFilters && (
            <div className="space-y-4">
              {/* 검색 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">검색</label>
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="체크리스트 내용 또는 입력자로 검색..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700"
                />
              </div>

              {/* 필터 옵션들 */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">위치</label>
                <select
                  value={filterWorkplace}
                  onChange={(e) => setFilterWorkplace(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700"
                >
                  <option value="">전체</option>
                  {workplaceOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">구분</label>
                <select
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700"
                >
                  <option value="">전체</option>
                  {categoryOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">시간대</label>
                <select
                  value={filterTimeSlot}
                  onChange={(e) => setFilterTimeSlot(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700"
                >
                  <option value="">전체</option>
                  {timeSlotOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  태그 (모든 선택된 태그를 포함하는 항목만 표시)
                  {selectedFilterTags.length > 0 && (
                    <span className="ml-2 text-xs text-blue-600 font-normal">
                      {selectedFilterTags.length}개 선택됨
                      {selectedFilterTags.length > 0 && (
                        <button
                          onClick={() => setSelectedFilterTags([])}
                          className="ml-2 text-red-500 hover:text-red-700"
                          title="선택된 태그 모두 해제"
                        >
                          ✕
                        </button>
                      )}
                    </span>
                  )}
                </label>
                <div className="border border-gray-300 rounded-lg p-3">
                  <div className={`grid grid-cols-2 gap-2 ${!showAllTags ? 'max-h-24 overflow-hidden' : ''}`}>
                    {tags.map((tag) => (
                      <label key={tag.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                        <input
                          type="checkbox"
                          checked={selectedFilterTags.includes(tag.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedFilterTags([...selectedFilterTags, tag.id]);
                            } else {
                              setSelectedFilterTags(selectedFilterTags.filter(id => id !== tag.id));
                            }
                          }}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <div className="flex items-center space-x-1">
                          <div
                            className="w-3 h-3 rounded-full"
                            style={{ backgroundColor: tag.color }}
                          ></div>
                          <span className="text-sm text-gray-700">{tag.name}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                  
                  {tags.length > 6 && (
                    <div className="mt-2 pt-2 border-t border-gray-200">
                      <button
                        type="button"
                        onClick={() => setShowAllTags(!showAllTags)}
                        className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                      >
                        {showAllTags ? '접기' : `더보기 (${tags.length - 6}개 더)`}
                      </button>
                    </div>
                  )}
                  
                  {/* 선택된 태그 표시 */}
                  {selectedFilterTags.length > 0 && (
                    <div className="mt-3 pt-3 border-t border-gray-200">
                      <div className="text-xs text-gray-600 mb-2">선택된 태그:</div>
                      <div className="flex flex-wrap gap-1">
                        {selectedFilterTags.map((tagId) => {
                          const tag = tags.find(t => t.id === tagId);
                          if (!tag) return null;
                          return (
                            <span
                              key={tagId}
                              className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                              style={{
                                backgroundColor: `${tag.color}40`,
                                color: tag.color,
                                border: `1px solid ${tag.color}40`
                              }}
                            >
                              <div
                                className="w-2 h-2 rounded-full mr-1"
                                style={{ backgroundColor: tag.color }}
                              ></div>
                              {tag.name}
                              <button
                                onClick={() => handleTagClick(tagId)}
                                className="ml-1 text-gray-500 hover:text-gray-700"
                                title="태그 제거"
                              >
                                ✕
                              </button>
                            </span>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>


            </div>
          )}
        </div>

        {/* 체크리스트 목록 */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-gray-800">등록된 체크리스트 목록</h2>
            <span className="text-sm text-gray-600">
              총 {filteredChecklists.length}개 (전체 {checklists.length}개)
            </span>
          </div>
          
                      {filteredChecklists.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                {checklists.length === 0 ? "등록된 체크리스트가 없습니다." : "필터 조건에 맞는 체크리스트가 없습니다."}
              </div>
            ) : (
              <div className="space-y-4">
                {filteredChecklists.map((checklist) => (
                <div key={checklist.id} className="border border-gray-200 rounded-lg p-4">
                  {editingId === checklist.id ? (
                    // 수정 모드
                    <form onSubmit={handleEditSubmit} className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">위치</label>
                          <select
                            value={editingData.workplace}
                            onChange={(e) => setEditingData({ ...editingData, workplace: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                            required
                          >
                            {workplaceOptions.map((option) => (
                              <option key={option.value} value={option.value} className="text-gray-800">
                                {option.label}
                              </option>
                            ))}
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">구분</label>
                          <select
                            value={editingData.category}
                            onChange={(e) => setEditingData({ ...editingData, category: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                            required
                          >
                            {categoryOptions.map((option) => (
                              <option key={option.value} value={option.value} className="text-gray-800">
                                {option.label}
                              </option>
                            ))}
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">시간</label>
                          <select
                            value={editingData.timeSlot}
                            onChange={(e) => setEditingData({ ...editingData, timeSlot: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                            required
                          >
                            {timeSlotOptions.map((option) => (
                              <option key={option.value} value={option.value} className="text-gray-800">
                                {option.label}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">체크리스트 내용</label>
                        <textarea
                          value={editingData.content}
                          onChange={(e) => setEditingData({ ...editingData, content: e.target.value })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                          rows={3}
                          required
                        />
                      </div>

                      {/* 수정 모드에서 태그 선택 */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <label className="block text-sm font-medium text-gray-700">
                            태그 선택 (선택사항)
                          </label>
                          <button
                            type="button"
                            onClick={() => setShowTagModal(true)}
                            className="flex items-center space-x-1 px-2 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            <span>태그 추가</span>
                          </button>
                        </div>
                        <div className="border border-gray-300 rounded-lg p-3">
                          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                            {tags.map((tag) => (
                              <label key={tag.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                                <input
                                  type="checkbox"
                                  checked={editingData.selectedTags.includes(tag.id)}
                                  onChange={(e) => {
                                    if (e.target.checked) {
                                      setEditingData({
                                        ...editingData,
                                        selectedTags: [...editingData.selectedTags, tag.id]
                                      });
                                    } else {
                                      setEditingData({
                                        ...editingData,
                                        selectedTags: editingData.selectedTags.filter(id => id !== tag.id)
                                      });
                                    }
                                  }}
                                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                />
                                <div className="flex items-center space-x-1">
                                  <div
                                    className="w-3 h-3 rounded-full"
                                    style={{ backgroundColor: tag.color }}
                                  ></div>
                                  <span className="text-sm text-gray-700">{tag.name}</span>
                                </div>
                              </label>
                            ))}
                          </div>
                          {tags.length === 0 && (
                            <p className="text-sm text-gray-500 mt-2">
                              등록된 태그가 없습니다. 위의 "태그 추가" 버튼을 클릭하여 새 태그를 생성해주세요.
                            </p>
                          )}
                        </div>
                      </div>

                      {/* 수정 모드에서 연결된 항목들 표시 */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <label className="block text-sm font-medium text-gray-700">
                            연결된 항목들 ({checklist.items ? checklist.items.length : 0}개)
                          </label>
                          <button
                            type="button"
                            onClick={() => {
                              setSelectedTemplateId(checklist.id);
                              setShowConnectionModal(true);
                            }}
                            className="flex items-center space-x-1 px-2 py-1 text-sm bg-purple-600 text-white rounded-md hover:bg-purple-700 transition"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            <span>항목 추가</span>
                          </button>
                        </div>
                                                {checklist.items && checklist.items.length > 0 ? (
                          <div className="border border-gray-300 rounded-lg p-3 bg-gray-50">
                            <div className="space-y-2">
                              {checklist.items.map((item) => (
                                <div key={item.id} className="flex items-center justify-between p-2 bg-white rounded border">
                                  <div className="flex items-center gap-2">
                                    <span className="text-sm font-medium text-gray-700">
                                      {item.content}
                                    </span>
                                    <span className={`px-2 py-1 text-xs rounded-full ${
                                      item.type === 'check' ? 'bg-gray-100 text-gray-700' :
                                      item.type.includes('inventory') ? 'bg-blue-100 text-blue-700' :
                                      item.type.includes('manual') ? 'bg-green-100 text-green-700' :
                                      item.type.includes('precaution') ? 'bg-yellow-100 text-yellow-700' :
                                      'bg-purple-100 text-purple-700'
                                    }`}>
                                      {item.type === 'check' ? '일반' :
                                       item.type.includes('inventory') ? '재고' :
                                       item.type.includes('manual') ? '메뉴얼' :
                                       item.type.includes('precaution') ? '주의사항' :
                                       item.type.includes('supply') ? '용품' :
                                       item.type.includes('ingredient') ? '재료' : item.type}
                                    </span>
                                    
                                    {/* 연결된 세부 항목들 표시 */}
                                    {item.inventoryItem && (
                                      <span className="text-xs text-blue-600">
                                        📦 {item.inventoryItem.name}
                                      </span>
                                    )}
                                    {item.precautions && item.precautions.length > 0 && (
                                      <span className="text-xs text-yellow-600">
                                        ⚠️ {item.precautions.length}개 주의사항
                                      </span>
                                    )}
                                    {item.manuals && item.manuals.length > 0 && (
                                      <span className="text-xs text-green-600">
                                        📖 {item.manuals.length}개 메뉴얼
                                      </span>
                                    )}
                                  </div>
                                  <div className="flex gap-1">
                                    <button
                                      type="button"
                                      onClick={() => openIntegratedEditModal(item)}
                                      className="p-1 text-blue-600 hover:text-blue-800"
                                      title="수정"
                                    >
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                      </svg>
                                    </button>
                                    <button
                                      type="button"
                                      onClick={() => handleItemDelete(item.id)}
                                      className="p-1 text-red-600 hover:text-red-800"
                                      title="삭제"
                                    >
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                      </svg>
                                    </button>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      )}

                      <div className="flex gap-2">
                        <button
                          type="submit"
                          disabled={submitting}
                          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50 flex items-center gap-2"
                          title="수정 완료"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          {submitting ? "수정 중..." : "완료"}
                        </button>
                        <button
                          type="button"
                          onClick={handleEditCancel}
                          className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition flex items-center gap-2"
                          title="취소"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          취소
                        </button>
                      </div>
                    </form>
                  ) : (
                    // 보기 모드
                    <div>
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1">
                          <p className="text-gray-800 font-medium mb-2">{checklist.content}</p>
                          <div className="flex flex-wrap gap-3 text-sm text-gray-600">
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                              {getWorkplaceLabel(checklist.workplace)}
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                              </svg>
                              {getCategoryLabel(checklist.category)}
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                              </svg>
                              {getTimeSlotLabel(checklist.timeSlot)}
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                              </svg>
                              {checklist.inputter}
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                              {new Date(checklist.inputDate).toLocaleDateString('ko-KR')}
                            </span>
                          </div>
                          {/* 태그 표시 */}
                          {checklist.tags && checklist.tags.length > 0 && (
                            <div className="flex gap-2 mt-2">
                              {checklist.tags.map((tag) => (
                                <button
                                  key={tag.id}
                                  onClick={() => handleTagClick(tag.id)}
                                  className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-all duration-200 hover:scale-105 ${
                                    selectedFilterTags.includes(tag.id) 
                                      ? 'ring-2 ring-blue-500 ring-offset-1' 
                                      : 'hover:shadow-md'
                                  }`}
                                  style={{
                                    backgroundColor: selectedFilterTags.includes(tag.id) 
                                      ? `${tag.color}40` 
                                      : `${tag.color}20`,
                                    color: tag.color,
                                    border: `1px solid ${tag.color}40`
                                  }}
                                  title={`${tag.name} 태그로 필터링`}
                                >
                                  <div
                                    className="w-2 h-2 rounded-full mr-1"
                                    style={{ backgroundColor: tag.color }}
                                  ></div>
                                  {tag.name}
                                  {selectedFilterTags.includes(tag.id) && (
                                    <svg className="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
                                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                    </svg>
                                  )}
                                </button>
                              ))}
                            </div>
                          )}
                          
                          {/* 연결된 항목들 표시 */}
                          {checklist.items && checklist.items.length > 0 && (
                            <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                              <h4 className="text-sm font-medium text-gray-700 mb-2">연결된 항목들:</h4>
                              <div className="space-y-2">
                                {checklist.items.map((item) => (
                                  <div key={item.id} className="flex items-center gap-2 text-sm">
                                    <span className="text-gray-600">• {item.content}</span>
                                    <span className={`px-2 py-1 text-xs rounded-full ${
                                      item.type === 'check' ? 'bg-gray-100 text-gray-700' :
                                      item.type.includes('inventory') ? 'bg-blue-100 text-blue-700' :
                                      item.type.includes('manual') ? 'bg-green-100 text-green-700' :
                                      item.type.includes('precaution') ? 'bg-yellow-100 text-yellow-700' :
                                      'bg-purple-100 text-purple-700'
                                    }`}>
                                      {item.type === 'check' ? '일반' :
                                       item.type.includes('inventory') ? '재고' :
                                       item.type.includes('manual') ? '메뉴얼' :
                                       item.type.includes('precaution') ? '주의사항' :
                                       item.type.includes('supply') ? '용품' :
                                       item.type.includes('ingredient') ? '재료' : item.type}
                                    </span>
                                    
                                    {/* 연결된 세부 항목들 표시 */}
                                    {item.inventoryItem && (
                                      <span className="text-xs text-blue-600">
                                        📦 {item.inventoryItem.name}
                                      </span>
                                    )}
                                    {item.precautions && item.precautions.length > 0 && (
                                      <span className="text-xs text-yellow-600">
                                        ⚠️ {item.precautions.length}개 주의사항
                                      </span>
                                    )}
                                    {item.manuals && item.manuals.length > 0 && (
                                      <span className="text-xs text-green-600">
                                        📖 {item.manuals.length}개 메뉴얼
                                      </span>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                        <div className="flex gap-2 ml-4">
                          <button
                            onClick={() => handleEdit(checklist)}
                            className="p-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition"
                            title="수정"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => handleDelete(checklist.id)}
                            className="p-2 bg-red-500 text-white rounded hover:bg-red-600 transition"
                            title="삭제"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* 삭제 확인 모달 */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">체크리스트 삭제</h3>
            <p className="text-gray-600 mb-6">
              이 체크리스트를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.
            </p>
            <div className="flex gap-3">
              <button
                onClick={confirmDelete}
                disabled={submitting}
                className="flex-1 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition disabled:opacity-50"
              >
                {submitting ? "삭제 중..." : "삭제"}
              </button>
              <button
                onClick={cancelDelete}
                className="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
              >
                취소
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 태그 생성 모달 */}
      {showTagModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">새 태그 생성</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  태그 이름 *
                </label>
                <input
                  type="text"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  placeholder="태그 이름을 입력하세요"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-700"
                  autoFocus
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  태그 색상
                </label>
                <input
                  type="color"
                  value={newTagColor}
                  onChange={(e) => setNewTagColor(e.target.value)}
                  className="w-full h-12 border border-gray-300 rounded-md cursor-pointer"
                />
              </div>
            </div>

            {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
            
            <div className="flex gap-3 mt-6">
              <button
                onClick={createTag}
                disabled={creatingTag}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
              >
                {creatingTag ? "생성 중..." : "생성"}
              </button>
              <button
                onClick={() => {
                  setShowTagModal(false);
                  setNewTagName("");
                  setNewTagColor("#3B82F6");
                  setError("");
                }}
                className="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
              >
                취소
              </button>
            </div>
          </div>
        </div>
      )}

      {/* 메인 입력란용 항목 연결 모달 */}
      {showConnectionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">항목 연결</h3>
              <button
                onClick={() => setShowConnectionModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-6">
              <div className="text-sm text-gray-600 mb-4">
                카테고리와 태그로 검색하여 연결할 항목을 선택하세요.
              </div>
              
              {/* 검색 필터 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    카테고리 선택
                  </label>
                  <select
                    value={connectionSearchCategory}
                    onChange={async (e) => {
                      const newCategory = e.target.value;
                      setConnectionSearchCategory(newCategory);
                      
                      // 카테고리 변경 시 바로 검색 실행
                      if (newCategory || connectionSearchTags.length > 0) {
                        setLoadingItemConnections(true);
                        try {
                          let searchUrl = '/api/admin/search-connections?';
                          if (newCategory) {
                            searchUrl += `category=${encodeURIComponent(newCategory)}&`;
                          }
                          if (connectionSearchTags.length > 0) {
                            searchUrl += `tags=${encodeURIComponent(connectionSearchTags.join(','))}`;
                          }
                          
                          const response = await fetch(searchUrl, { credentials: 'include' });
                          if (response.ok) {
                            const data = await response.json();
                            setFilteredConnectionItems(data.items || []);
                          }
                        } catch (error) {
                          console.error('검색 실패:', error);
                        } finally {
                          setLoadingItemConnections(false);
                        }
                      } else {
                        setFilteredConnectionItems([]);
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                  >
                    <option value="">전체 카테고리</option>
                    <option value="INGREDIENTS">재료</option>
                    <option value="SUPPLIES">용품</option>
                    <option value="PRECAUTIONS">주의사항</option>
                    <option value="MANUALS">메뉴얼</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    태그 선택
                  </label>
                  <div className="border border-gray-300 rounded-lg p-3 max-h-32 overflow-y-auto">
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                      {tags.map((tag) => (
                        <button
                          key={tag.id}
                          onClick={async () => {
                            let newTags;
                            if (connectionSearchTags.includes(tag.name)) {
                              newTags = connectionSearchTags.filter(t => t !== tag.name);
                            } else {
                              newTags = [...connectionSearchTags, tag.name];
                            }
                            setConnectionSearchTags(newTags);
                            
                            // 태그 선택 시 바로 검색 실행
                            if (newTags.length > 0) {
                              setLoadingItemConnections(true);
                              try {
                                let searchUrl = '/api/admin/search-connections?';
                                if (connectionSearchCategory) {
                                  searchUrl += `category=${encodeURIComponent(connectionSearchCategory)}&`;
                                }
                                // 여러 태그를 쉼표로 구분하여 전송
                                searchUrl += `tags=${encodeURIComponent(newTags.join(','))}`;
                                
                                const response = await fetch(searchUrl, { credentials: 'include' });
                                if (response.ok) {
                                  const data = await response.json();
                                  setFilteredConnectionItems(data.items || []);
                                }
                              } catch (error) {
                                console.error('검색 실패:', error);
                              } finally {
                                setLoadingItemConnections(false);
                              }
                            } else {
                              setFilteredConnectionItems([]);
                            }
                          }}
                          className={`flex items-center space-x-1 p-2 rounded-lg border transition ${
                            connectionSearchTags.includes(tag.name)
                              ? 'bg-blue-100 border-blue-300'
                              : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                          }`}
                        >
                          <div
                            className="w-3 h-3 rounded-full"
                            style={{ backgroundColor: tag.color }}
                          ></div>
                          <span className="text-xs text-gray-700">{tag.name}</span>
                        </button>
                      ))}
                    </div>
                    {tags.length === 0 && (
                      <p className="text-sm text-gray-500 text-center py-4">
                        등록된 태그가 없습니다.
                      </p>
                    )}
                  </div>
                </div>
              </div>



              {/* 검색 결과 */}
              {filteredConnectionItems.length > 0 && (
                <div>
                  <h4 className="text-md font-medium text-gray-700 mb-3">
                    검색 결과 ({filteredConnectionItems.length}개)
                  </h4>
                  <div className="border border-gray-200 rounded-lg p-3 max-h-60 overflow-y-auto">
                    {filteredConnectionItems.map((item) => (
                      <label key={item.id} className="flex items-center space-x-2 cursor-pointer p-2 rounded hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
                        <input
                          type="checkbox"
                          checked={selectedConnectionItems.some(selected => selected.id === item.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedConnectionItems([...selectedConnectionItems, item]);
                            } else {
                              setSelectedConnectionItems(selectedConnectionItems.filter(selected => selected.id !== item.id));
                            }
                          }}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <div className="flex-1">
                          <div className="text-sm font-medium text-gray-700">{item.title || item.name}</div>
                          <div className="text-xs text-gray-500">
                            {item.content ? item.content.substring(0, 50) + '...' : 
                             item.category === 'INGREDIENTS' ? '재료' : 
                             item.category === 'SUPPLIES' ? '용품' : 
                             item.category === 'PRECAUTIONS' ? '주의사항' : 
                             item.category === 'MANUALS' ? '메뉴얼' : item.category}
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              {/* 선택된 항목들 */}
              {selectedConnectionItems.length > 0 && (
                <div>
                  <h4 className="text-md font-medium text-gray-700 mb-3">
                    선택된 항목들 ({selectedConnectionItems.length}개)
                  </h4>
                  <div className="border border-gray-200 rounded-lg p-3 bg-gray-50">
                    {selectedConnectionItems.map((item) => (
                      <div key={item.id} className="flex items-center justify-between p-2 border-b border-gray-200 last:border-b-0">
                        <div>
                          <div className="text-sm font-medium text-gray-700">{item.title || item.name}</div>
                          <div className="text-xs text-gray-500">
                            {item.category === 'INGREDIENTS' ? '재료' : 
                             item.category === 'SUPPLIES' ? '용품' : 
                             item.category === 'PRECAUTIONS' ? '주의사항' : 
                             item.category === 'MANUALS' ? '메뉴얼' : item.category}
                          </div>
                        </div>
                        <button
                          onClick={() => {
                            setSelectedConnectionItems(selectedConnectionItems.filter(selected => selected.id !== item.id));
                          }}
                          className="text-red-500 hover:text-red-700"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* 연결 완료 버튼 */}
              <div className="flex gap-3 pt-6 border-t border-gray-200">
                <button
                  onClick={() => {
                    // 선택된 항목들을 임시 저장
                    console.log('선택된 항목들:', selectedConnectionItems);
                    
                    if (selectedConnectionItems.length > 0) {
                      // 임시 저장
                      setTempConnectedItems(selectedConnectionItems);
                      
                      // 성공 메시지 표시
                      const itemTypes = selectedConnectionItems.map(item => {
                        if (item.category === 'INGREDIENTS') return '재료';
                        if (item.category === 'SUPPLIES') return '용품';
                        if (item.category === 'PRECAUTIONS') return '주의사항';
                        if (item.category === 'MANUALS') return '메뉴얼';
                        return '항목';
                      });
                      const uniqueTypes = [...new Set(itemTypes)];
                      alert(`${selectedConnectionItems.length}개의 항목이 선택되었습니다.\n\n선택된 항목: ${uniqueTypes.join(', ')}\n\n체크리스트 등록 시 함께 저장됩니다.`);
                    } else {
                      alert('선택된 항목이 없습니다.');
                    }
                    
                    setShowConnectionModal(false);
                    setConnectionSearchCategory('');
                    setConnectionSearchTags([]);
                    setFilteredConnectionItems([]);
                    setSelectedConnectionItems([]);
                  }}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                >
                  연결 완료
                </button>
                <button
                  onClick={() => {
                    setShowConnectionModal(false);
                    setConnectionSearchCategory('');
                    setConnectionSearchTags([]);
                    setFilteredConnectionItems([]);
                    setSelectedConnectionItems([]);
                  }}
                  className="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
                >
                  취소
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* 체크리스트 항목 관리 모달 */}
      {showItemModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">
                {editingItemId ? "체크리스트 항목 수정" : "새 체크리스트 항목 추가"}
              </h3>
              <button
                onClick={() => setShowItemModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* 왼쪽: 항목 추가/수정 폼 */}
              <div>
                <h4 className="text-md font-medium text-gray-700 mb-3">항목 추가/수정</h4>
              
                <form onSubmit={handleItemSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        항목 타입 *
                      </label>
                      <select
                        value={itemFormData.type}
                        onChange={(e) => setItemFormData({ ...itemFormData, type: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                        required
                      >
                        <option value="check">일반 체크</option>
                        <option value="inventory_check">재고 확인</option>
                        <option value="inventory_restock">재고 보충</option>
                        <option value="manual_reference">메뉴얼 참조</option>
                        <option value="precaution_check">주의사항 확인</option>
                        <option value="supply_check">부대용품 확인</option>
                        <option value="ingredient_check">재료 확인</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        순서
                      </label>
                      <input
                        type="number"
                        value={itemFormData.order}
                        onChange={(e) => setItemFormData({ ...itemFormData, order: parseInt(e.target.value) || 0 })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                        min="0"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      항목 내용 *
                    </label>
                    <textarea
                      value={itemFormData.content}
                      onChange={(e) => setItemFormData({ ...itemFormData, content: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                      rows={3}
                      placeholder="체크리스트 항목 내용을 입력하세요..."
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      상세 지침 (선택사항)
                    </label>
                    <textarea
                      value={itemFormData.instructions}
                      onChange={(e) => setItemFormData({ ...itemFormData, instructions: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                      rows={2}
                      placeholder="항목에 대한 상세한 지침이나 설명을 입력하세요..."
                    />
                  </div>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="isRequired"
                      checked={itemFormData.isRequired}
                      onChange={(e) => setItemFormData({ ...itemFormData, isRequired: e.target.checked })}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <label htmlFor="isRequired" className="text-sm font-medium text-gray-700">
                      필수 항목
                    </label>
                  </div>

                  {/* 연결 선택 섹션 */}
                  {(itemFormData.type.includes('inventory') || itemFormData.type.includes('supply') || itemFormData.type.includes('ingredient')) && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        연결할 재고 아이템
                      </label>
                      <select
                        value={itemFormData.inventoryItemId}
                        onChange={(e) => setItemFormData({ ...itemFormData, inventoryItemId: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                      >
                        <option value="">선택하세요</option>
                        {inventoryItems.map((item) => (
                          <option key={item.id} value={item.id}>
                            {item.name} ({item.category === 'INGREDIENTS' ? '재료' : item.category === 'SUPPLIES' ? '용품' : '기타'}) - 현재: {item.currentStock} {item.unit}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}

                  {itemFormData.type.includes('precaution') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        연결할 주의사항 (다중 선택 가능)
                      </label>
                      <div className="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                        {loadingConnections ? (
                          <p className="text-sm text-gray-500">로딩 중...</p>
                        ) : precautions.length > 0 ? (
                          precautions.map((precaution) => (
                            <label key={precaution.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                              <input
                                type="checkbox"
                                checked={itemFormData.precautionIds.includes(precaution.id)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setItemFormData({
                                      ...itemFormData,
                                      precautionIds: [...itemFormData.precautionIds, precaution.id]
                                    });
                                  } else {
                                    setItemFormData({
                                      ...itemFormData,
                                      precautionIds: itemFormData.precautionIds.filter(id => id !== precaution.id)
                                    });
                                  }
                                }}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                              <div className="flex-1">
                                <div className="text-sm font-medium text-gray-700">{precaution.title}</div>
                                <div className="text-xs text-gray-500">{precaution.content.substring(0, 50)}...</div>
                              </div>
                            </label>
                          ))
                        ) : (
                          <p className="text-sm text-gray-500">등록된 주의사항이 없습니다.</p>
                        )}
                      </div>
                    </div>
                  )}

                  {itemFormData.type.includes('manual') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        연결할 메뉴얼 (다중 선택 가능)
                      </label>
                      <div className="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                        {loadingConnections ? (
                          <p className="text-sm text-gray-500">로딩 중...</p>
                        ) : manuals.length > 0 ? (
                          manuals.map((manual) => (
                            <label key={manual.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                              <input
                                type="checkbox"
                                checked={itemFormData.manualIds.includes(manual.id)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setItemFormData({
                                      ...itemFormData,
                                      manualIds: [...itemFormData.manualIds, manual.id]
                                    });
                                  } else {
                                    setItemFormData({
                                      ...itemFormData,
                                      manualIds: itemFormData.manualIds.filter(id => id !== manual.id)
                                    });
                                  }
                                }}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                              <div className="flex-1">
                                <div className="text-sm font-medium text-gray-700">{manual.title}</div>
                                <div className="text-xs text-gray-500">{manual.content.substring(0, 50)}...</div>
                              </div>
                            </label>
                          ))
                        ) : (
                          <p className="text-sm text-gray-500">등록된 메뉴얼이 없습니다.</p>
                        )}
                      </div>
                    </div>
                  )}

                  {error && <p className="text-red-600 text-sm">{error}</p>}
                  
                  <div className="flex gap-3">
                    <button
                      type="submit"
                      className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                    >
                      {editingItemId ? "수정" : "추가"}
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setShowItemModal(false);
                        setEditingItemId(null);
                        setItemFormData({
                          type: "check",
                          content: "",
                          instructions: "",
                          order: 0,
                          isRequired: true,
                          inventoryItemId: "",
                          precautionIds: [],
                          manualIds: [],
                        });
                      }}
                      className="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
                    >
                      취소
                    </button>
                  </div>
                </form>
              </div>

              {/* 오른쪽: 기존 항목 목록 */}
              <div>
                <h4 className="text-md font-medium text-gray-700 mb-3">기존 항목 목록</h4>
                {loadingItems ? (
                  <div className="text-center py-8">
                    <p className="text-gray-500">로딩 중...</p>
                  </div>
                ) : checklistItems.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-gray-500">등록된 항목이 없습니다.</p>
                  </div>
                ) : (
                  <div className="space-y-3 max-h-96 overflow-y-auto">
                    {checklistItems.map((item) => (
                      <div key={item.id} className="border border-gray-200 rounded-lg p-3">
                        <div className="flex justify-between items-start mb-2">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-sm font-medium text-gray-700">{item.content}</span>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                item.type === 'check' ? 'bg-gray-100 text-gray-700' :
                                item.type.includes('inventory') ? 'bg-blue-100 text-blue-700' :
                                item.type.includes('manual') ? 'bg-green-100 text-green-700' :
                                item.type.includes('precaution') ? 'bg-yellow-100 text-yellow-700' :
                                'bg-purple-100 text-purple-700'
                              }`}>
                                {item.type === 'check' ? '일반' :
                                 item.type.includes('inventory') ? '재고' :
                                 item.type.includes('manual') ? '메뉴얼' :
                                 item.type.includes('precaution') ? '주의사항' :
                                 item.type.includes('supply') ? '용품' :
                                 item.type.includes('ingredient') ? '재료' : item.type}
                              </span>
                              {item.isRequired && (
                                <span className="px-2 py-1 text-xs bg-red-100 text-red-700 rounded-full">
                                  필수
                                </span>
                              )}
                            </div>
                            {item.instructions && (
                              <p className="text-xs text-gray-500 mb-2">{item.instructions}</p>
                            )}
                            {/* 연결된 항목들 표시 */}
                            {item.inventoryItem && (
                              <div className="text-xs text-blue-600 mb-1">
                                📦 {item.inventoryItem.name} ({item.inventoryItem.currentStock} {item.inventoryItem.unit})
                              </div>
                            )}
                                                         {item.precautions && item.precautions.length > 0 && (
                               <div className="text-xs text-yellow-600 mb-1">
                                 ⚠️ {item.precautions.map((p: any) => p.title).join(', ')}
                               </div>
                             )}
                             {item.manuals && item.manuals.length > 0 && (
                               <div className="text-xs text-green-600 mb-1">
                                 📖 {item.manuals.map((m: any) => m.title).join(', ')}
                               </div>
                             )}
                          </div>
                          <div className="flex gap-1 ml-2">
                            <button
                              onClick={() => openIntegratedEditModal(item)}
                              className="p-1 text-blue-600 hover:text-blue-800"
                              title="수정"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                            </button>
                            <button
                              onClick={() => handleItemDelete(item.id)}
                              className="p-1 text-red-600 hover:text-red-800"
                              title="삭제"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}



      {/* 통합 수정 모달 */}
      {showIntegratedEditModal && editingItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">항목 수정</h3>
              <button
                onClick={() => setShowIntegratedEditModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* 탭 네비게이션 */}
            <div className="flex border-b border-gray-200 mb-6">
              <button
                onClick={() => setActiveTab('basic')}
                className={`px-4 py-2 text-sm font-medium border-b-2 transition ${
                  activeTab === 'basic'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                기본 정보
              </button>
              <button
                onClick={async () => {
                  setActiveTab('connections');
                  // 항목 연결 탭을 클릭할 때 데이터를 다시 로드
                  await fetchConnections();
                }}
                className={`px-4 py-2 text-sm font-medium border-b-2 transition ${
                  activeTab === 'connections'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                항목 연결
              </button>
              <button
                onClick={() => setActiveTab('tags')}
                className={`px-4 py-2 text-sm font-medium border-b-2 transition ${
                  activeTab === 'tags'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                태그 관리
              </button>
            </div>
            
            {/* 디버그: 현재 활성 탭 표시 */}
            <div className="text-xs text-red-500 mb-2">
              현재 활성 탭: {activeTab}
            </div>

            {/* 탭 내용 */}
            {activeTab === 'basic' && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    항목 내용 *
                  </label>
                  <input
                    type="text"
                    value={editingItem.content}
                    onChange={(e) => setEditingItem({ ...editingItem, content: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    지시사항
                  </label>
                  <textarea
                    value={editingItem.instructions || ""}
                    onChange={(e) => setEditingItem({ ...editingItem, instructions: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                    rows={3}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      순서
                    </label>
                    <input
                      type="number"
                      value={editingItem.order}
                      onChange={(e) => setEditingItem({ ...editingItem, order: parseInt(e.target.value) })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      필수 여부
                    </label>
                    <select
                      value={editingItem.isRequired ? "true" : "false"}
                      onChange={(e) => setEditingItem({ ...editingItem, isRequired: e.target.value === "true" })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                    >
                      <option value="true">필수</option>
                      <option value="false">선택</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'connections' && (
              <div className="space-y-6">
                <div className="text-sm text-gray-600 mb-4">
                  카테고리와 태그로 검색하여 연결할 항목을 선택하세요.
                </div>
                
                {/* 검색 필터 */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      카테고리 선택
                    </label>
                    <select
                      value={connectionSearchCategory}
                      onChange={(e) => setConnectionSearchCategory(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800"
                    >
                      <option value="">전체 카테고리</option>
                      <option value="INGREDIENTS">재료</option>
                      <option value="SUPPLIES">용품</option>
                      <option value="PRECAUTIONS">주의사항</option>
                      <option value="MANUALS">메뉴얼</option>
                    </select>
                  </div>
                  
                                     <div>
                     <label className="block text-sm font-medium text-gray-700 mb-2">
                       태그 선택
                     </label>
                     <div className="border border-gray-300 rounded-lg p-3 max-h-32 overflow-y-auto">
                       <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                         {tags.map((tag) => (
                           <button
                             key={tag.id}
                             onClick={() => setConnectionSearchTag(connectionSearchTag === tag.name ? '' : tag.name)}
                             className={`flex items-center space-x-1 p-2 rounded-lg border transition ${
                               connectionSearchTag === tag.name
                                 ? 'bg-blue-100 border-blue-300'
                                 : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                             }`}
                           >
                             <div
                               className="w-3 h-3 rounded-full"
                               style={{ backgroundColor: tag.color }}
                             ></div>
                             <span className="text-xs text-gray-700">{tag.name}</span>
                           </button>
                         ))}
                       </div>
                       {tags.length === 0 && (
                         <p className="text-sm text-gray-500 text-center py-4">
                           등록된 태그가 없습니다.
                         </p>
                       )}
                     </div>
                   </div>
                </div>

                {/* 검색 버튼 */}
                <div className="flex justify-center">
                  <button
                    onClick={async () => {
                      setLoadingItemConnections(true);
                      try {
                        let searchUrl = '/api/admin/search-connections?';
                        if (connectionSearchCategory) {
                          searchUrl += `category=${encodeURIComponent(connectionSearchCategory)}&`;
                        }
                        if (connectionSearchTag) {
                          searchUrl += `tag=${encodeURIComponent(connectionSearchTag)}&`;
                        }
                        
                        const response = await fetch(searchUrl, { credentials: 'include' });
                        if (response.ok) {
                          const data = await response.json();
                          setFilteredConnectionItems(data.items || []);
                        }
                      } catch (error) {
                        console.error('검색 실패:', error);
                      } finally {
                        setLoadingItemConnections(false);
                      }
                    }}
                    disabled={loadingItemConnections}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
                  >
                    {loadingItemConnections ? '검색 중...' : '검색'}
                  </button>
                </div>

                {/* 검색 결과 */}
                {filteredConnectionItems.length > 0 && (
                  <div>
                    <h4 className="text-md font-medium text-gray-700 mb-3">
                      검색 결과 ({filteredConnectionItems.length}개)
                    </h4>
                    <div className="border border-gray-200 rounded-lg p-3 max-h-60 overflow-y-auto">
                      {filteredConnectionItems.map((item) => (
                        <label key={item.id} className="flex items-center space-x-2 cursor-pointer p-2 rounded hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
                          <input
                            type="checkbox"
                            checked={selectedConnectionItems.some(selected => selected.id === item.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedConnectionItems([...selectedConnectionItems, item]);
                              } else {
                                setSelectedConnectionItems(selectedConnectionItems.filter(selected => selected.id !== item.id));
                              }
                            }}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                          <div className="flex-1">
                            <div className="text-sm font-medium text-gray-700">{item.title || item.name}</div>
                            <div className="text-xs text-gray-500">
                              {item.content ? item.content.substring(0, 50) + '...' : 
                               item.category === 'INGREDIENTS' ? '재료' : 
                               item.category === 'SUPPLIES' ? '용품' : 
                               item.category === 'PRECAUTIONS' ? '주의사항' : 
                               item.category === 'MANUALS' ? '메뉴얼' : item.category}
                            </div>
                          </div>
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* 선택된 항목들 */}
                {selectedConnectionItems.length > 0 && (
                  <div>
                    <h4 className="text-md font-medium text-gray-700 mb-3">
                      선택된 항목들 ({selectedConnectionItems.length}개)
                    </h4>
                    <div className="border border-gray-200 rounded-lg p-3 bg-gray-50">
                      {selectedConnectionItems.map((item) => (
                        <div key={item.id} className="flex items-center justify-between p-2 border-b border-gray-200 last:border-b-0">
                          <div>
                            <div className="text-sm font-medium text-gray-700">{item.title || item.name}</div>
                            <div className="text-xs text-gray-500">
                              {item.category === 'INGREDIENTS' ? '재료' : 
                               item.category === 'SUPPLIES' ? '용품' : 
                               item.category === 'PRECAUTIONS' ? '주의사항' : 
                               item.category === 'MANUALS' ? '메뉴얼' : item.category}
                            </div>
                          </div>
                          <button
                            onClick={() => {
                              setSelectedConnectionItems(selectedConnectionItems.filter(selected => selected.id !== item.id));
                            }}
                            className="text-red-500 hover:text-red-700"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {activeTab === 'tags' && (
              <div className="space-y-4">
                <div className="text-sm text-gray-600 mb-4">
                  이 항목에 적용할 태그를 선택하세요.
                </div>
                
                <div className="border border-gray-300 rounded-lg p-3">
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {tags.map((tag) => (
                      <label key={tag.id} className="flex items-center space-x-2 cursor-pointer p-1 rounded hover:bg-gray-50">
                        <input
                          type="checkbox"
                          checked={editingItem.tags?.some(t => t.id === tag.id) || false}
                          onChange={(e) => {
                            const currentTags = editingItem.tags || [];
                            if (e.target.checked) {
                              setEditingItem({
                                ...editingItem,
                                tags: [...currentTags, tag]
                              });
                            } else {
                              setEditingItem({
                                ...editingItem,
                                tags: currentTags.filter(t => t.id !== tag.id)
                              });
                            }
                          }}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <div className="flex items-center space-x-1">
                          <div
                            className="w-3 h-3 rounded-full"
                            style={{ backgroundColor: tag.color }}
                          ></div>
                          <span className="text-sm text-gray-700">{tag.name}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                  {tags.length === 0 && (
                    <p className="text-sm text-gray-500 mt-2">
                      등록된 태그가 없습니다.
                    </p>
                  )}
                </div>
              </div>
            )}

            {/* 저장 버튼 */}
            <div className="flex gap-3 pt-6 border-t border-gray-200 mt-6">
              <button
                onClick={async () => {
                  if (!editingItem) return;
                  
                  try {
                    const response = await fetch(`/api/admin/checklist-items?id=${editingItem.id}`, {
                      method: 'PUT',
                      headers: { 'Content-Type': 'application/json' },
                      credentials: 'include',
                      body: JSON.stringify({
                        content: editingItem.content,
                        instructions: editingItem.instructions,
                        order: editingItem.order,
                        isRequired: editingItem.isRequired,
                        inventoryItemId: editingItem.inventoryItem?.id || null,
                        precautionIds: editingItem.precautions?.map(p => p.id) || [],
                        manualIds: editingItem.manuals?.map(m => m.id) || [],
                        tagIds: editingItem.tags?.map(t => t.id) || []
                      })
                    });

                    if (response.ok) {
                      setSuccess('항목이 성공적으로 수정되었습니다.');
                      setShowIntegratedEditModal(false);
                      // 체크리스트 목록 새로고침
                      fetchChecklists();
                    } else {
                      const data = await response.json();
                      setError(data.error || '항목 수정에 실패했습니다.');
                    }
                  } catch (error) {
                    setError('항목 수정 중 오류가 발생했습니다.');
                  }
                }}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
              >
                저장
              </button>
              <button
                onClick={() => setShowIntegratedEditModal(false)}
                className="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
              >
                취소
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 