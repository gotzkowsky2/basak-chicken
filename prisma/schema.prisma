generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String              @id @default(cuid())
  username           String              @unique
  password           String
  email              String              @unique
  name               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  reopenedChecklists ChecklistInstance[]
}

model Tag {
  id                         String                         @id @default(cuid())
  name                       String                         @unique
  color                      String?
  createdAt                  DateTime                       @default(now())
  checklistTemplateRelations ChecklistTemplateTagRelation[]
  inventoryItemRelations     InventoryItemTagRelation[]
  manualRelations            ManualTagRelation[]
  precautionRelations        PrecautionTagRelation[]
  checklistTemplates         ChecklistTemplate[]            @relation("ChecklistTemplateTags")
  inventoryItems             InventoryItem[]                @relation("InventoryItemTags")
  manuals                    Manual[]                       @relation("ManualTags")
  precautions                Precaution[]                   @relation("PrecautionTags")
}

model ChecklistTemplateTagRelation {
  id         String            @id @default(cuid())
  templateId String
  tagId      String
  createdAt  DateTime          @default(now())
  tag        Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  template   ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, tagId])
}

model InventoryItemTagRelation {
  id        String        @id @default(cuid())
  itemId    String
  tagId     String
  createdAt DateTime      @default(now())
  item      InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag       Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itemId, tagId])
}

model PrecautionTagRelation {
  id           String     @id @default(cuid())
  precautionId String
  tagId        String
  createdAt    DateTime   @default(now())
  precaution   Precaution @relation(fields: [precautionId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([precautionId, tagId])
}

model ManualTagRelation {
  id        String   @id @default(cuid())
  manualId  String
  tagId     String
  createdAt DateTime @default(now())
  manual    Manual   @relation(fields: [manualId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([manualId, tagId])
}

// 메뉴얼-주의사항 관계
model ManualPrecautionRelation {
  id          String @id @default(cuid())
  manualId    String
  precautionId String
  order       Int    @default(0)
  createdAt   DateTime @default(now())
  
  // 관계
  manual      Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  precaution  Precaution @relation(fields: [precautionId], references: [id], onDelete: Cascade)
  
  @@unique([manualId, precautionId])
}

model Employee {
  id                 String                    @id @default(cuid())
  employeeId         String                    @unique
  password           String
  name               String
  email              String?
  phone              String?
  department         String
  position           String
  isActive           Boolean                   @default(true)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  isSuperAdmin       Boolean                   @default(false)
  isTempPassword     Boolean                   @default(false)
  address            String?
  checklistInstances ChecklistInstance[]
  inventoryChecks    InventoryCheck[]
  purchaseRequests   PurchaseRequest[]
  purchasedItems     PurchaseRequestItem[]
  lockedTimeSlots    TimeSlotChecklistStatus[]
}

model ChecklistTemplate {
  id           String                         @id @default(cuid())
  content      String
  inputter     String
  inputDate    DateTime                       @default(now())
  workplace    Workplace
  category     Category
  timeSlot     TimeSlot
  isActive     Boolean                        @default(true)
  createdAt    DateTime                       @default(now())
  updatedAt    DateTime                       @updatedAt
  name         String                         @default("")
  instances    ChecklistInstance[]
  items        ChecklistItem[]
  tagRelations ChecklistTemplateTagRelation[]
  tags         Tag[]                          @relation("ChecklistTemplateTags")
}

model ChecklistInstance {
  id                      String                  @id @default(cuid())
  employeeId              String?
  templateId              String
  date                    DateTime
  workplace               Workplace
  timeSlot                TimeSlot
  isCompleted             Boolean                 @default(false)
  isSubmitted             Boolean                 @default(false)
  submittedAt             DateTime?
  isReopened              Boolean                 @default(false)
  reopenedAt              DateTime?
  reopenedBy              String?
  reopenReason            String?
  notes                   String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  completedAt             DateTime?
  completedBy             String?
  itemProgress            Json?
  employee                Employee?               @relation(fields: [employeeId], references: [id])
  reopenedByAdmin         Admin?                  @relation(fields: [reopenedBy], references: [id])
  template                ChecklistTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  checklistItemProgresses ChecklistItemProgress[] @relation("ChecklistInstanceProgress")
  connectedItemsProgress  ConnectedItemProgress[]

  @@unique([workplace, timeSlot, date])
}

model ConnectedItemProgress {
  id           String            @id @default(cuid())
  instanceId   String
  itemId       String
  currentStock Int?
  updatedStock Int?
  isCompleted  Boolean           @default(false)
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  completedAt  DateTime?
  completedBy  String?
  connectionId String?
  instance     ChecklistInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

model ChecklistItemProgress {
  id          String            @id @default(cuid())
  instanceId  String
  itemId      String
  isCompleted Boolean           @default(false)
  completedBy String?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  instance    ChecklistInstance @relation("ChecklistInstanceProgress", fields: [instanceId], references: [id], onDelete: Cascade)
  item        ChecklistItem     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([instanceId, itemId])
}

model Precaution {
  id           String                  @id @default(cuid())
  title        String
  content      String
  workplace    Workplace
  timeSlot     TimeSlot
  priority     Int                     @default(1)
  isActive     Boolean                 @default(true)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  tagRelations PrecautionTagRelation[]
  tags         Tag[]                   @relation("PrecautionTags")
  manualRelations ManualPrecautionRelation[]
  manuals      Manual[]                @relation("ManualPrecautions")
}

model Manual {
  id           String              @id @default(cuid())
  title        String
  content      String
  mediaUrls    String[]
  workplace    Workplace
  timeSlot     TimeSlot
  category     Category
  version      String              @default("1.0")
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  tagRelations ManualTagRelation[]
  tags         Tag[]               @relation("ManualTags")
  precautionRelations ManualPrecautionRelation[]
  precautions  Precaution[]        @relation("ManualPrecautions")
}

model InventoryItem {
  id            String                     @id @default(cuid())
  name          String
  category      Category
  currentStock  Float
  minStock      Float
  unit          String
  supplier      String?
  lastUpdated   DateTime                   @default(now())
  lastCheckedBy String?
  isActive      Boolean                    @default(true)
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  checks        InventoryCheck[]
  tagRelations  InventoryItemTagRelation[]
  purchaseItems PurchaseRequestItem[]
  tags          Tag[]                      @relation("InventoryItemTags")
}

model InventoryCheck {
  id                   String        @id @default(cuid())
  itemId               String
  checkedBy            String
  checkedAt            DateTime      @default(now())
  currentStock         Float
  notes                String?
  needsRestock         Boolean       @default(false)
  estimatedRestockDate DateTime?
  employee             Employee      @relation(fields: [checkedBy], references: [id])
  item                 InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model PurchaseRequest {
  id            String                @id @default(cuid())
  requestedBy   String
  requestedAt   DateTime              @default(now())
  status        PurchaseStatus        @default(PENDING)
  priority      PurchasePriority      @default(MEDIUM)
  estimatedCost Float?
  notes         String?
  approvedBy    String?
  approvedAt    DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  employee      Employee              @relation(fields: [requestedBy], references: [id])
  items         PurchaseRequestItem[]
}

model PurchaseRequestItem {
  id                String          @id @default(cuid())
  purchaseRequestId String
  itemId            String
  quantity          Float
  unitPrice         Float?
  notes             String?
  purchasedBy       String?
  purchasedAt       DateTime?
  receivedAt        DateTime?
  item              InventoryItem   @relation(fields: [itemId], references: [id])
  request           PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  employee          Employee?       @relation(fields: [purchasedBy], references: [id])
}

model ChecklistItem {
  id             String                    @id @default(cuid())
  templateId     String
  parentId       String?
  type           String
  content        String
  instructions   String?
  order          Int                       @default(0)
  isRequired     Boolean                   @default(true)
  isActive       Boolean                   @default(true)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  parent         ChecklistItem?            @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children       ChecklistItem[]           @relation("ParentChild")
  template       ChecklistTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  connectedItems ChecklistItemConnection[]
  progress       ChecklistItemProgress[]
}

model ChecklistItemConnection {
  id              String        @id @default(cuid())
  checklistItemId String
  itemType        String
  itemId          String
  order           Int           @default(0)
  createdAt       DateTime      @default(now())
  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)

  @@unique([checklistItemId, itemType, itemId])
}

model TimeSlotChecklistStatus {
  id        String    @id @default(cuid())
  date      DateTime  @db.Date
  workplace Workplace
  timeSlot  TimeSlot
  lockedBy  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String
  employee  Employee? @relation(fields: [lockedBy], references: [id])

  @@unique([date, timeSlot, workplace])
}

model PosReport {
  id               String   @id @default(cuid())
  filename         String
  originalFilename String
  recordCount      Int
  uploadDate       DateTime @default(now())
  uploadedBy       String
  data             Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Workplace {
  HALL
  KITCHEN
  COMMON
}

enum Category {
  CHECKLIST
  PRECAUTIONS
  HYGIENE
  SUPPLIES
  INGREDIENTS
  COMMON
  MANUAL
}

enum TimeSlot {
  PREPARATION
  IN_PROGRESS
  CLOSING
  COMMON
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
  PURCHASED
  RECEIVED
}

enum PurchasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
