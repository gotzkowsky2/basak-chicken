generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id             String                @id @default(cuid())
  employeeId     String                @unique
  password       String
  name           String
  email          String?
  phone          String?
  department     String
  position       String
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  isSuperAdmin   Boolean               @default(false)
  isTempPassword Boolean               @default(false)
  address        String?
  submissions    ChecklistSubmission[]
}

model Checklist {
  id          String                @id @default(cuid())
  title       String
  description String?
  department  String
  position    String
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  items       ChecklistItem[]
  submissions ChecklistSubmission[]
}

model ChecklistItem {
  id          String                  @id @default(cuid())
  checklistId String
  title       String
  description String?
  order       Int
  isRequired  Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  checklist   Checklist               @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  responses   ChecklistItemResponse[]
}

model ChecklistSubmission {
  id          String                  @id @default(cuid())
  employeeId  String
  checklistId String
  submittedAt DateTime                @default(now())
  notes       String?
  responses   ChecklistItemResponse[]
  checklist   Checklist               @relation(fields: [checklistId], references: [id])
  employee    Employee                @relation(fields: [employeeId], references: [id])
}

model ChecklistItemResponse {
  id           String              @id @default(cuid())
  submissionId String
  itemId       String
  isCompleted  Boolean
  notes        String?
  completedAt  DateTime?
  item         ChecklistItem       @relation(fields: [itemId], references: [id])
  submission   ChecklistSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}
